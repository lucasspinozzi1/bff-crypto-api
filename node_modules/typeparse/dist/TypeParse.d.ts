import { Static, TParseNumber, TParseString, TParseBoolean, TParseObject, TParseObjectProperties, TParseOption, TParseRequired, TParseArray, TParseOptions, TParseAny, TParseUnion } from "./Types";
export declare class TypeParse<T extends TParseOptions = TParseOptions> {
    private config;
    constructor(parseConfig: T);
    private _parse;
    parse(input: unknown): Static<T>;
    private parseString;
    private parseNumber;
    private parseBoolean;
    private parseAny;
    private parseArray;
    private parseObject;
    private parseUnion;
}
export declare const Types: {
    String: (from?: string | undefined, config?: {
        defaultValue?: string | undefined;
    } | undefined) => TParseRequired<TParseString>;
    Number: (from?: string | undefined, config?: {
        defaultValue?: number | undefined;
    } | undefined) => TParseRequired<TParseNumber>;
    Boolean: (from?: string | undefined, config?: {
        defaultValue?: boolean | undefined;
        strict?: boolean | undefined;
    } | undefined) => TParseRequired<TParseBoolean>;
    Any: (from?: string | undefined, config?: {
        defaultValue?: boolean | undefined;
    } | undefined) => TParseRequired<TParseAny>;
    Array: <T extends TParseOption>(type: T, from?: string | undefined) => TParseRequired<TParseArray<T>>;
    Object: <T_1 extends TParseObjectProperties>(properties: T_1) => TParseRequired<TParseObject<T_1>>;
    Union: <T_2 extends TParseOption[]>(types: T_2) => TParseRequired<TParseUnion<T_2>>;
};
