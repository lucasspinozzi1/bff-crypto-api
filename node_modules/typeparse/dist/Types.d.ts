/**
 * Base parse option.
 */
export interface TParseOption {
    $static: unknown;
    from?: string;
    as: string;
    isOptional: boolean;
}
export declare type TParseRequired<T extends TParseOption> = T & {
    isOptional: false;
    optional: () => TParseOptional<T>;
};
export declare type TParseOptional<T extends TParseOption> = T & {
    isOptional: true;
};
export interface TParseString extends TParseOption {
    $static: string;
    from?: string;
    as: "string";
    defaultValue?: string;
}
export interface TParseNumber extends TParseOption {
    $static: number;
    from?: string;
    as: "number";
    defaultValue?: number;
}
export interface TParseBoolean extends TParseOption {
    $static: boolean;
    from?: string;
    as: "boolean";
    strict: boolean;
    defaultValue?: boolean;
}
export interface TParseAny extends TParseOption {
    $static: any;
    from?: string;
    as: "any";
    defaultValue?: unknown;
}
export interface TParseObject<T extends TParseObjectProperties> extends TParseOption {
    $static: SObject<T>;
    as: "object";
    properties: T;
}
export interface TParseArray<T extends TParseOption> extends TParseOption {
    $static: Array<Static<T>>;
    as: "array";
    from?: string;
    type: T;
}
export interface TParseObjectProperties {
    [key: string]: TParseOptions;
}
export interface TParseUnion<T extends TParseOption[]> extends TParseOption {
    $static: SUnion<T>;
    as: "union";
    types: T;
}
export declare type SObjectOptionalPropertyKeys<T extends TParseObjectProperties> = {
    [K in keyof T]: T[K] extends TParseOptional<TParseOption> ? K : never;
}[keyof T];
export declare type SObjectRequiredPropertyKeys<T extends TParseObjectProperties> = keyof Omit<T, SObjectOptionalPropertyKeys<T>>;
export declare type SObjectProperties<T extends TParseObjectProperties> = {
    [I in SObjectRequiredPropertyKeys<T>]: Static<T[I]>;
} & {
    [I in SObjectOptionalPropertyKeys<T>]?: Static<T[I]>;
};
export declare type SObject<T extends TParseObjectProperties> = SObjectProperties<T> extends infer I ? {
    [K in keyof I]: I[K];
} : never;
export declare type SUnion<T extends TParseOption[]> = {
    [K in keyof T]: T[K] extends TParseOption ? Static<T[K]> : never;
}[number];
export declare type Static<T extends TParseOption> = T["$static"];
export declare type TParseOptions = TParseString | TParseNumber | TParseBoolean | TParseAny | TParseArray<TParseOption> | TParseObject<TParseObjectProperties> | TParseUnion<TParseOption[]>;
