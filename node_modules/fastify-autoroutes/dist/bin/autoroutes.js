#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const extract = __importStar(require("./utils/extract"));
const generateTs_1 = __importDefault(require("./utils/generateTs"));
const generateJs_1 = __importDefault(require("./utils/generateJs"));
const extract_1 = require("./utils/extract");
const argv = yargs_1.default(process.argv.slice(2))
    .usage('Usage: $0 <path>')
    .example('$0 users.ts', 'generate users resource')
    .example('$0 users/:userId.ts', 'generate user specific resource')
    .example('$0 users/:userId/ban.ts', 'generate user specific action')
    .example('$0 users/:userId/scopes.ts -f', 'generate user specific field')
    // .command('path', 'file location of autoroutes module')
    .options('field', {
    description: 'specific resource is a field',
    type: 'boolean',
    default: false,
    alias: 'f',
});
extract_1.allMethods.map((m) => argv.options(m, {
    type: 'boolean',
    default: false,
    description: `include ${m.toUpperCase()} method`,
}));
argv.check((args) => {
    const file = args._[0];
    if (file === undefined) {
        throw new Error(`autoroutes path is required`);
    }
    if (typeof file === 'number') {
        throw new Error(`file must be a string path, got: ${file}`);
    }
    const base = extract.getBase();
    if (!base) {
        throw new Error('unable to get base directory');
    }
    if (file.endsWith('.ts') === false && file.endsWith('.js') === false) {
        throw new Error(`autoroutes "${file}" must ends with ".js" or ".ts"`);
    }
    const outf = path_1.default.join(base, file);
    if (fs_1.default.existsSync(outf)) {
        throw new Error(`file ${outf} already exists`);
    }
    return true;
});
const args = argv.argv;
const file = args._[0];
const base = extract.getBase();
const outf = path_1.default.join(base, file);
// console.log(
generate(outf, file, extract_1.allMethods.filter((m) => args[m]), {
    isField: args.field,
});
// )
function generate(path, file, methods, options) {
    return outf.endsWith('.ts')
        ? generateTs_1.default(path, file, methods, options)
        : generateJs_1.default(path, file);
}
//# sourceMappingURL=autoroutes.js.map