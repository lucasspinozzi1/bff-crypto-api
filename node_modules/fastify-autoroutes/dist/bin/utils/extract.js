"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalizeFirstLetter = exports.getNameInfo = exports.getParameters = exports.getBase = exports.allMethods = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const json5_1 = __importDefault(require("json5"));
const pluralize_1 = __importDefault(require("pluralize"));
exports.allMethods = [
    'get',
    'put',
    'patch',
    'post',
    'delete',
    'options',
    'head',
];
function getBase() {
    var _a, _b;
    const root = process.cwd();
    // attemmpt load from auto.json
    if (fs_1.default.existsSync(path_1.default.join(root, 'auto.json'))) {
        const config = JSON.parse(fs_1.default.readFileSync(path_1.default.join(root, 'auto.json'), 'utf8'));
        if ((_a = config === null || config === void 0 ? void 0 : config.routes) === null || _a === void 0 ? void 0 : _a.dir) {
            const dir = path_1.default.join(root, config.routes.dir);
            console.info(`using auto.json baseDir: ${dir}`);
            return dir;
        }
    }
    // attempt load from tsconfig.json
    if (fs_1.default.existsSync(path_1.default.join(root, 'tsconfig.json'))) {
        const config = json5_1.default.parse(fs_1.default.readFileSync(path_1.default.join(root, 'tsconfig.json'), 'utf8'));
        if ((_b = config === null || config === void 0 ? void 0 : config.compilerOptions) === null || _b === void 0 ? void 0 : _b.rootDir) {
            const dir = path_1.default.join(root, config.compilerOptions.rootDir, 'routes');
            console.info(`using tsconfig.json baseDir: ${dir}`);
            return dir;
        }
    }
}
exports.getBase = getBase;
function getParameters(path) {
    var _a, _b;
    const parameters = [
        ...(((_a = path
            .match(/{{([^}]*)}}/g)) === null || _a === void 0 ? void 0 : _a.map((m) => m.replace(/{{([^}]*)}}/g, '$1'))) || []),
        ...(((_b = path.match(/:[^/]*/g)) === null || _b === void 0 ? void 0 : _b.map((m) => m.replace(/:/g, ''))) || []),
    ];
    return parameters;
}
exports.getParameters = getParameters;
function getNameInfo(path, options) {
    const ext = '.' + path.split('.').pop();
    const pathNoExt = path.replace(ext, '');
    const nameResolvedParts = pathNoExt
        .split('/')
        .filter(Boolean)
        .map(liquidToName)
        .map(capitalizeFirstLetter)
        .map(mergePrevious)
        .map(singularizeNext);
    let name = nameResolvedParts.join('');
    const last = nameResolvedParts[nameResolvedParts.length - 1];
    const type = (options === null || options === void 0 ? void 0 : options.isField)
        ? 'FIELD'
        : last.startsWith('By')
            ? 'SPECIFIC'
            : pluralize_1.default.isPlural(last)
                ? 'RESOURCE'
                : 'ACTION';
    let action = undefined;
    if (type === 'ACTION') {
        action = nameResolvedParts.pop();
        name = [action, ...nameResolvedParts].join('');
    }
    return {
        name,
        action,
        type,
        suggest: suggestedMethods(type),
        parameters: getParameters(pathNoExt),
        resource: findLastResource(nameResolvedParts),
    };
}
exports.getNameInfo = getNameInfo;
function findLastResource(parts) {
    if (!parts || !parts.length) {
        return;
    }
    for (let i = parts.length - 1; i >= 0; i--) {
        if (parts[i].startsWith('By') === false) {
            return capitalizeFirstLetter(pluralize_1.default.singular(parts[i]));
        }
    }
}
function suggestedMethods(type) {
    switch (type) {
        case 'RESOURCE':
            return ['get', 'post'];
        case 'SPECIFIC':
            return ['get', 'put', 'delete'];
        case 'ACTION':
            return ['get', 'post'];
        case 'FIELD':
            return ['get', 'patch'];
    }
}
function liquidToName(part) {
    return part.startsWith('{{')
        ? part.replace('{{', '').replace('}}', '')
        : part.startsWith(':')
            ? part.replace(':', '')
            : part;
}
function capitalizeFirstLetter(part) {
    return part.charAt(0).toUpperCase() + part.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
function mergePrevious(part, index, array) {
    return index === 0 || matchPrevious(array[index - 1], part) === false
        ? part
        : `By${capitalizeFirstLetter(replacePrevious(array[index - 1], part))}`;
}
function matchPrevious(before, after) {
    return after.startsWith(pluralize_1.default.isPlural(before) ? pluralize_1.default.singular(before) : before);
}
function replacePrevious(before, after) {
    const beforeSingular = pluralize_1.default.isPlural(before)
        ? pluralize_1.default.singular(before)
        : before;
    return pluralize_1.default.singular(after.replace(beforeSingular, ''));
}
function singularizeNext(part, index, array) {
    return index === array.length - 1 ||
        array[index + 1].startsWith('By') === false
        ? part
        : pluralize_1.default.singular(part);
}
//# sourceMappingURL=extract.js.map