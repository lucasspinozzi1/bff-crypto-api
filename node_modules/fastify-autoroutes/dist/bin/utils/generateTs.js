"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSpecificMethodImplementation = exports.buildSpecificMethodInterface = exports.buildBaseInterface = void 0;
const extract = __importStar(require("./extract"));
const extract_1 = require("./extract");
const template = `
import type { FastifyInstance, FastifyRequest, RequestGenericInterface } from 'fastify'
import type { StrictResource } from 'fastify-autoroutes'

{{BASE_INTERFACE}}

{{GET_INTERFACE}}

{{PUT_INTERFACE}}

{{PATCH_INTERFACE}}

{{POST_INTERFACE}}

{{DELETE_INTERFACE}}

{{HEAD_INTERFACE}}

{{OPTIONS_INTERFACE}}

export default (fastify: FastifyInstance): StrictResource => ({
  {{GET}}
  {{PUT}}
  {{PATCH}}
  {{POST}}
  {{DELETE}}
  {{HEAD}}
  {{OPTIONS}}
})
`;
function default_1(path, file, methods, options) {
    // const parameters = extract.getParameters(path)
    const nameInfo = extract.getNameInfo(file, options);
    console.log({ nameInfo });
    methods = methods.length ? methods : nameInfo.suggest;
    const toRemoveMethods = extract_1.allMethods.filter((m) => methods.includes(m) === false);
    console.log({
        methods,
        toRemoveMethods,
    });
    console.log('=========================================');
    console.log('initial');
    console.log('=========================================');
    console.log(template);
    ////////////////////////////////////////////////////////
    console.log('=========================================');
    console.log('BASE_INTERFACE');
    console.log('=========================================');
    const templateWithBaseInterface = template.replace('{{BASE_INTERFACE}}', buildBaseInterface(nameInfo));
    console.log(templateWithBaseInterface);
    ////////////////////////////////////////////////////////
    console.log('=========================================');
    console.log('METHODS_INTERFACE');
    console.log('=========================================');
    const templateWithMethodsInterface = methods.reduce((currentTemplate, method) => currentTemplate.replace(`{{${method.toUpperCase()}_INTERFACE}}`, buildSpecificMethodInterface(method, nameInfo)), templateWithBaseInterface);
    console.log(templateWithMethodsInterface);
    return;
    ////////////////////////////////////////////////////////
    console.log('=========================================');
    console.log('METHODS_IMPLEMENTATION');
    console.log('=========================================');
    const templateWithMethodsImplementation = methods.reduce((currentTemplate, method) => currentTemplate.replace(`{{${method.toUpperCase()}}}`, buildSpecificMethodImplementation(method, nameInfo)), templateWithMethodsInterface);
    console.log(templateWithMethodsImplementation);
    ////////////////////////////////////////////////////////
    console.log('=========================================');
    console.log('FINAL');
    console.log('=========================================');
    const templateCleaned = toRemoveMethods.reduce((currentTemplate, method) => currentTemplate
        .replace(`{{${method.toUpperCase()}_INTERFACE}}`, '')
        .replace(`{{${method.toUpperCase()}`, ''), templateWithMethodsImplementation);
    console.log(templateCleaned);
    return templateCleaned;
}
exports.default = default_1;
const template_baseInterface = `interface Request{{name}} extends RequestGenericInterface {
{{params}}
}`;
function buildBaseInterface({ name, parameters }) {
    return template_baseInterface
        .replace('{{name}}', name)
        .replace('{{params}}', parameters.length
        ? '  Params: {\n' +
            (parameters === null || parameters === void 0 ? void 0 : parameters.map((p) => `    ${p}: string`).join('\n')) +
            '\n  }'
        : '');
}
exports.buildBaseInterface = buildBaseInterface;
const template_SpecificMethodsInterface = `interface {{method}}Request{{name}} extends Request{{name}} {
{{querystring}}
{{body}}
}`;
function buildSpecificMethodInterface(method, nameInfo) {
    return clean(template_SpecificMethodsInterface
        .replace(/{{name}}/g, nameInfo.name)
        .replace(/{{method}}/g, extract.capitalizeFirstLetter(method.toLowerCase()))
        .replace(/{{querystring}}/g, buildQuerystring(method, nameInfo))
        .replace(/{{body}}/g, buildBody(method, nameInfo)));
}
exports.buildSpecificMethodInterface = buildSpecificMethodInterface;
function buildQuerystring(method, nameInfo) {
    switch (method) {
        case 'get': {
            return nameInfo.type === 'RESOURCE'
                ? '  Querystring: Pagination & (GetByIds | Search)'
                : '';
        }
        case 'put':
        case 'patch':
        case 'post':
        case 'delete':
        case 'head':
        case 'options':
        default:
            return '';
    }
}
function buildBody(method, nameInfo) {
    switch (method) {
        case 'put':
        case 'patch': {
            return nameInfo.type === 'SPECIFIC'
                ? `  Body: Update${nameInfo.resource}`
                : '';
        }
        case 'post': {
            return nameInfo.type === 'RESOURCE'
                ? `  Body: Create${nameInfo.resource}`
                : nameInfo.type === 'ACTION'
                    ? `  Body: Do${nameInfo.action}`
                    : '';
        }
        default: {
            return '';
        }
    }
}
const template_SpecificMethodImplementation = `
{{method}}: {
  schema: {
    summary: '{{summary}}',
    description: '{{description}}',
    tags: {{tags}},
    security: {{security}},
    querystring: {{querystring}},
    body: {{body}},
    response: {{response}}
  },
  handler: async (request: FastifyRequest<{{method}}Request{{name}}>): Promise<{{return}}> => void
}
`;
function buildSpecificMethodImplementation(method, nameInfo) {
    switch (method) {
        case 'get': {
            return clean(template_SpecificMethodImplementation);
        }
        case 'put': {
        }
        case 'patch': {
        }
        case 'post': {
        }
        case 'delete': {
        }
        case 'options': {
        }
        case 'head':
            {
            }
            return '';
    }
}
exports.buildSpecificMethodImplementation = buildSpecificMethodImplementation;
const template_Querystring = `
  Querystring: Pagination & (Search | GetByIds)
`;
function clean(template) {
    return template.split('\n').filter(Boolean).join('\n');
}
//# sourceMappingURL=generateTs.js.map